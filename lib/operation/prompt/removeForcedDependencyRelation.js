"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "default", {
    enumerable: true,
    get: function() {
        return removeForcedDependencyRelationPromptOperation;
    }
});
var _necessary = require("necessary");
var _validate = require("../../utilities/validate");
var _messages = require("../../messages");
var _descriptions = require("../../descriptions");
var prompt = _necessary.shellUtilities.prompt;
function removeForcedDependencyRelationPromptOperation(proceed, abort, context) {
    var attempts = Infinity, description = _descriptions.SPECIFY_FORCED_DEPENDENCY_RELATION_TO_REMOVE_DESCRIPTION, errorMessage = _messages.INVALID_FORCED_DEPENDENCY_RELATION_NUMBER_MESSAGE, forcedDependencyRelationNumbers = context.forcedDependencyRelationNumbers, validationFunction = function(forcedDependencyRelationNumber) {
        forcedDependencyRelationNumber = Number(forcedDependencyRelationNumber); ///
        return (0, _validate.validateForcedDependencyRelationNumber)(forcedDependencyRelationNumber, forcedDependencyRelationNumbers);
    }, options = {
        attempts: attempts,
        description: description,
        errorMessage: errorMessage,
        validationFunction: validationFunction
    };
    prompt(options, function(answer) {
        var forcedDependencyRelationNumber = answer !== null ? Number(answer) : null, valid = forcedDependencyRelationNumber !== null;
        if (valid) {
            Object.assign(context, {
                forcedDependencyRelationNumber: forcedDependencyRelationNumber
            });
            proceed();
            return;
        }
        abort();
    });
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9vcGVyYXRpb24vcHJvbXB0L3JlbW92ZUZvcmNlZERlcGVuZGVuY3lSZWxhdGlvbi5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcblxuaW1wb3J0IHsgc2hlbGxVdGlsaXRpZXMgfSBmcm9tIFwibmVjZXNzYXJ5XCI7XG5cbmltcG9ydCB7IHZhbGlkYXRlRm9yY2VkRGVwZW5kZW5jeVJlbGF0aW9uTnVtYmVyIH0gZnJvbSBcIi4uLy4uL3V0aWxpdGllcy92YWxpZGF0ZVwiO1xuaW1wb3J0IHsgSU5WQUxJRF9GT1JDRURfREVQRU5ERU5DWV9SRUxBVElPTl9OVU1CRVJfTUVTU0FHRSB9IGZyb20gXCIuLi8uLi9tZXNzYWdlc1wiO1xuaW1wb3J0IHsgU1BFQ0lGWV9GT1JDRURfREVQRU5ERU5DWV9SRUxBVElPTl9UT19SRU1PVkVfREVTQ1JJUFRJT04gfSBmcm9tIFwiLi4vLi4vZGVzY3JpcHRpb25zXCI7XG5cbmNvbnN0IHsgcHJvbXB0IH0gPSBzaGVsbFV0aWxpdGllcztcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gcmVtb3ZlRm9yY2VkRGVwZW5kZW5jeVJlbGF0aW9uUHJvbXB0T3BlcmF0aW9uKHByb2NlZWQsIGFib3J0LCBjb250ZXh0KSB7XG4gIGNvbnN0IGF0dGVtcHRzID0gSW5maW5pdHksXG4gICAgICAgIGRlc2NyaXB0aW9uID0gU1BFQ0lGWV9GT1JDRURfREVQRU5ERU5DWV9SRUxBVElPTl9UT19SRU1PVkVfREVTQ1JJUFRJT04sXG4gICAgICAgIGVycm9yTWVzc2FnZSA9IElOVkFMSURfRk9SQ0VEX0RFUEVOREVOQ1lfUkVMQVRJT05fTlVNQkVSX01FU1NBR0UsXG4gICAgICAgIHsgZm9yY2VkRGVwZW5kZW5jeVJlbGF0aW9uTnVtYmVycyB9ID0gY29udGV4dCxcbiAgICAgICAgdmFsaWRhdGlvbkZ1bmN0aW9uID0gKGZvcmNlZERlcGVuZGVuY3lSZWxhdGlvbk51bWJlcikgPT4ge1xuICAgICAgICAgIGZvcmNlZERlcGVuZGVuY3lSZWxhdGlvbk51bWJlciA9IE51bWJlcihmb3JjZWREZXBlbmRlbmN5UmVsYXRpb25OdW1iZXIpOyAgLy8vXG5cbiAgICAgICAgICByZXR1cm4gdmFsaWRhdGVGb3JjZWREZXBlbmRlbmN5UmVsYXRpb25OdW1iZXIoZm9yY2VkRGVwZW5kZW5jeVJlbGF0aW9uTnVtYmVyLCBmb3JjZWREZXBlbmRlbmN5UmVsYXRpb25OdW1iZXJzKTtcbiAgICAgICAgfSwgIC8vL1xuICAgICAgICBvcHRpb25zID0ge1xuICAgICAgICAgIGF0dGVtcHRzLFxuICAgICAgICAgIGRlc2NyaXB0aW9uLFxuICAgICAgICAgIGVycm9yTWVzc2FnZSxcbiAgICAgICAgICB2YWxpZGF0aW9uRnVuY3Rpb25cbiAgICAgICAgfTtcblxuICBwcm9tcHQob3B0aW9ucywgKGFuc3dlcikgPT4ge1xuICAgIGNvbnN0IGZvcmNlZERlcGVuZGVuY3lSZWxhdGlvbk51bWJlciA9IChhbnN3ZXIgIT09IG51bGwpID9cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIE51bWJlcihhbnN3ZXIpIDpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbnVsbCxcbiAgICAgICAgICB2YWxpZCA9IChmb3JjZWREZXBlbmRlbmN5UmVsYXRpb25OdW1iZXIgIT09IG51bGwpO1xuXG4gICAgaWYgKHZhbGlkKSB7XG4gICAgICBPYmplY3QuYXNzaWduKGNvbnRleHQsIHtcbiAgICAgICAgZm9yY2VkRGVwZW5kZW5jeVJlbGF0aW9uTnVtYmVyXG4gICAgICB9KTtcblxuICAgICAgcHJvY2VlZCgpO1xuXG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgYWJvcnQoKTtcbiAgfSk7XG59XG4iXSwibmFtZXMiOlsicmVtb3ZlRm9yY2VkRGVwZW5kZW5jeVJlbGF0aW9uUHJvbXB0T3BlcmF0aW9uIiwicHJvbXB0Iiwic2hlbGxVdGlsaXRpZXMiLCJwcm9jZWVkIiwiYWJvcnQiLCJjb250ZXh0IiwiYXR0ZW1wdHMiLCJJbmZpbml0eSIsImRlc2NyaXB0aW9uIiwiU1BFQ0lGWV9GT1JDRURfREVQRU5ERU5DWV9SRUxBVElPTl9UT19SRU1PVkVfREVTQ1JJUFRJT04iLCJlcnJvck1lc3NhZ2UiLCJJTlZBTElEX0ZPUkNFRF9ERVBFTkRFTkNZX1JFTEFUSU9OX05VTUJFUl9NRVNTQUdFIiwiZm9yY2VkRGVwZW5kZW5jeVJlbGF0aW9uTnVtYmVycyIsInZhbGlkYXRpb25GdW5jdGlvbiIsImZvcmNlZERlcGVuZGVuY3lSZWxhdGlvbk51bWJlciIsIk51bWJlciIsInZhbGlkYXRlRm9yY2VkRGVwZW5kZW5jeVJlbGF0aW9uTnVtYmVyIiwib3B0aW9ucyIsImFuc3dlciIsInZhbGlkIiwiT2JqZWN0IiwiYXNzaWduIl0sIm1hcHBpbmdzIjoiQUFBQTs7OzsrQkFVQTs7O2VBQXdCQTs7O3lCQVJPO3dCQUV3Qjt3QkFDVzs0QkFDTztBQUV6RSxJQUFNLEFBQUVDLFNBQVdDLHlCQUFjLENBQXpCRDtBQUVPLFNBQVNELDhDQUE4Q0csT0FBTyxFQUFFQyxLQUFLLEVBQUVDLE9BQU87SUFDM0YsSUFBTUMsV0FBV0MsVUFDWEMsY0FBY0Msc0VBQXdELEVBQ3RFQyxlQUFlQywyREFBaUQsRUFDaEUsQUFBRUMsa0NBQW9DUCxRQUFwQ08saUNBQ0ZDLHFCQUFxQixTQUFDQztRQUNwQkEsaUNBQWlDQyxPQUFPRCxpQ0FBa0MsR0FBRztRQUU3RSxPQUFPRSxJQUFBQSxnREFBc0MsRUFBQ0YsZ0NBQWdDRjtJQUNoRixHQUNBSyxVQUFVO1FBQ1JYLFVBQUFBO1FBQ0FFLGFBQUFBO1FBQ0FFLGNBQUFBO1FBQ0FHLG9CQUFBQTtJQUNGO0lBRU5aLE9BQU9nQixTQUFTLFNBQUNDO1FBQ2YsSUFBTUosaUNBQWlDLEFBQUNJLFdBQVcsT0FDVkgsT0FBT0csVUFDTCxNQUNyQ0MsUUFBU0wsbUNBQW1DO1FBRWxELElBQUlLLE9BQU87WUFDVEMsT0FBT0MsTUFBTSxDQUFDaEIsU0FBUztnQkFDckJTLGdDQUFBQTtZQUNGO1lBRUFYO1lBRUE7UUFDRjtRQUVBQztJQUNGO0FBQ0YifQ==