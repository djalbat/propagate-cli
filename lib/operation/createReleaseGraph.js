"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "default", {
    enumerable: true,
    get: function() {
        return createReleaseGraphOperation;
    }
});
var _messages = /*#__PURE__*/ _interop_require_default(require("../messages"));
var _releaseGraph = /*#__PURE__*/ _interop_require_default(require("../releaseGraph"));
var _console = require("../utilities/console");
var _configuration = require("../configuration");
function _interop_require_default(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
var AT_LEAST_ONE_CYCLIC_DEPENDENCY_MESSAGE = _messages.default.AT_LEAST_ONE_CYCLIC_DEPENDENCY_MESSAGE, AT_LEAST_ONE_CYCLIC_DEV_DEPENDENCY_MESSAGE = _messages.default.AT_LEAST_ONE_CYCLIC_DEV_DEPENDENCY_MESSAGE;
function createReleaseGraphOperation(proceed, abort, context) {
    var releaseMap = context.releaseMap, subDirectoryMap = context.subDirectoryMap, forcedDependencyRelations = (0, _configuration.retrieveForcedDependencyRelations)(), releaseGraph = _releaseGraph.default.fromReleaseMapSubDirectoryMapAndForcedDependencyRelations(releaseMap, subDirectoryMap, forcedDependencyRelations), cyclicDependencyPresent = releaseGraph.isCyclicDependencyPresent(), cyclicDevDependencyPresent = releaseGraph.isCyclicDevDependencyPresent();
    if (cyclicDependencyPresent) {
        var cyclicDependencySubDirectoryPaths = releaseGraph.getCyclicDependencySubDirectoryPaths();
        console.log(AT_LEAST_ONE_CYCLIC_DEPENDENCY_MESSAGE);
        (0, _console.consoleLogSubDirectoryPathsCycle)(cyclicDependencySubDirectoryPaths);
        abort();
        return;
    }
    if (cyclicDevDependencyPresent) {
        var cyclicDevDependencySubDirectoryPaths = releaseGraph.getCyclicDevDependencySubDirectoryPaths();
        console.log(AT_LEAST_ONE_CYCLIC_DEV_DEPENDENCY_MESSAGE);
        (0, _console.consoleLogSubDirectoryPathsCycle)(cyclicDevDependencySubDirectoryPaths);
        abort();
        return;
    }
    Object.assign(context, {
        releaseGraph: releaseGraph
    });
    proceed();
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9vcGVyYXRpb24vY3JlYXRlUmVsZWFzZUdyYXBoLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuXG5pbXBvcnQgbWVzc2FnZXMgZnJvbSBcIi4uL21lc3NhZ2VzXCI7XG5pbXBvcnQgUmVsZWFzZUdyYXBoIGZyb20gXCIuLi9yZWxlYXNlR3JhcGhcIjtcblxuaW1wb3J0IHsgY29uc29sZUxvZ1N1YkRpcmVjdG9yeVBhdGhzQ3ljbGUgfSBmcm9tICcuLi91dGlsaXRpZXMvY29uc29sZSc7XG5pbXBvcnQgeyByZXRyaWV2ZUZvcmNlZERlcGVuZGVuY3lSZWxhdGlvbnMgfSBmcm9tIFwiLi4vY29uZmlndXJhdGlvblwiO1xuXG5jb25zdCB7IEFUX0xFQVNUX09ORV9DWUNMSUNfREVQRU5ERU5DWV9NRVNTQUdFLCBBVF9MRUFTVF9PTkVfQ1lDTElDX0RFVl9ERVBFTkRFTkNZX01FU1NBR0UgfSA9IG1lc3NhZ2VzO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBjcmVhdGVSZWxlYXNlR3JhcGhPcGVyYXRpb24ocHJvY2VlZCwgYWJvcnQsIGNvbnRleHQpIHtcbiAgY29uc3QgeyByZWxlYXNlTWFwLCBzdWJEaXJlY3RvcnlNYXAgfSA9IGNvbnRleHQsXG4gICAgICAgIGZvcmNlZERlcGVuZGVuY3lSZWxhdGlvbnMgPSByZXRyaWV2ZUZvcmNlZERlcGVuZGVuY3lSZWxhdGlvbnMoKSxcbiAgICAgICAgcmVsZWFzZUdyYXBoID0gUmVsZWFzZUdyYXBoLmZyb21SZWxlYXNlTWFwU3ViRGlyZWN0b3J5TWFwQW5kRm9yY2VkRGVwZW5kZW5jeVJlbGF0aW9ucyhyZWxlYXNlTWFwLCBzdWJEaXJlY3RvcnlNYXAsIGZvcmNlZERlcGVuZGVuY3lSZWxhdGlvbnMpLFxuICAgICAgICBjeWNsaWNEZXBlbmRlbmN5UHJlc2VudCA9IHJlbGVhc2VHcmFwaC5pc0N5Y2xpY0RlcGVuZGVuY3lQcmVzZW50KCksXG4gICAgICAgIGN5Y2xpY0RldkRlcGVuZGVuY3lQcmVzZW50ID0gcmVsZWFzZUdyYXBoLmlzQ3ljbGljRGV2RGVwZW5kZW5jeVByZXNlbnQoKTtcblxuICBpZiAoY3ljbGljRGVwZW5kZW5jeVByZXNlbnQpIHtcbiAgICBjb25zdCBjeWNsaWNEZXBlbmRlbmN5U3ViRGlyZWN0b3J5UGF0aHMgPSByZWxlYXNlR3JhcGguZ2V0Q3ljbGljRGVwZW5kZW5jeVN1YkRpcmVjdG9yeVBhdGhzKCk7XG5cbiAgICBjb25zb2xlLmxvZyhBVF9MRUFTVF9PTkVfQ1lDTElDX0RFUEVOREVOQ1lfTUVTU0FHRSk7XG5cbiAgICBjb25zb2xlTG9nU3ViRGlyZWN0b3J5UGF0aHNDeWNsZShjeWNsaWNEZXBlbmRlbmN5U3ViRGlyZWN0b3J5UGF0aHMpO1xuXG4gICAgYWJvcnQoKTtcblxuICAgIHJldHVybjtcbiAgfVxuXG4gIGlmIChjeWNsaWNEZXZEZXBlbmRlbmN5UHJlc2VudCkge1xuICAgIGNvbnN0IGN5Y2xpY0RldkRlcGVuZGVuY3lTdWJEaXJlY3RvcnlQYXRocyA9IHJlbGVhc2VHcmFwaC5nZXRDeWNsaWNEZXZEZXBlbmRlbmN5U3ViRGlyZWN0b3J5UGF0aHMoKTtcblxuICAgIGNvbnNvbGUubG9nKEFUX0xFQVNUX09ORV9DWUNMSUNfREVWX0RFUEVOREVOQ1lfTUVTU0FHRSk7XG5cbiAgICBjb25zb2xlTG9nU3ViRGlyZWN0b3J5UGF0aHNDeWNsZShjeWNsaWNEZXZEZXBlbmRlbmN5U3ViRGlyZWN0b3J5UGF0aHMpO1xuXG4gICAgYWJvcnQoKTtcblxuICAgIHJldHVybjtcbiAgfVxuXG4gIE9iamVjdC5hc3NpZ24oY29udGV4dCwge1xuICAgIHJlbGVhc2VHcmFwaFxuICB9KTtcblxuICBwcm9jZWVkKCk7XG59XG4iXSwibmFtZXMiOlsiY3JlYXRlUmVsZWFzZUdyYXBoT3BlcmF0aW9uIiwiQVRfTEVBU1RfT05FX0NZQ0xJQ19ERVBFTkRFTkNZX01FU1NBR0UiLCJtZXNzYWdlcyIsIkFUX0xFQVNUX09ORV9DWUNMSUNfREVWX0RFUEVOREVOQ1lfTUVTU0FHRSIsInByb2NlZWQiLCJhYm9ydCIsImNvbnRleHQiLCJyZWxlYXNlTWFwIiwic3ViRGlyZWN0b3J5TWFwIiwiZm9yY2VkRGVwZW5kZW5jeVJlbGF0aW9ucyIsInJldHJpZXZlRm9yY2VkRGVwZW5kZW5jeVJlbGF0aW9ucyIsInJlbGVhc2VHcmFwaCIsIlJlbGVhc2VHcmFwaCIsImZyb21SZWxlYXNlTWFwU3ViRGlyZWN0b3J5TWFwQW5kRm9yY2VkRGVwZW5kZW5jeVJlbGF0aW9ucyIsImN5Y2xpY0RlcGVuZGVuY3lQcmVzZW50IiwiaXNDeWNsaWNEZXBlbmRlbmN5UHJlc2VudCIsImN5Y2xpY0RldkRlcGVuZGVuY3lQcmVzZW50IiwiaXNDeWNsaWNEZXZEZXBlbmRlbmN5UHJlc2VudCIsImN5Y2xpY0RlcGVuZGVuY3lTdWJEaXJlY3RvcnlQYXRocyIsImdldEN5Y2xpY0RlcGVuZGVuY3lTdWJEaXJlY3RvcnlQYXRocyIsImNvbnNvbGUiLCJsb2ciLCJjb25zb2xlTG9nU3ViRGlyZWN0b3J5UGF0aHNDeWNsZSIsImN5Y2xpY0RldkRlcGVuZGVuY3lTdWJEaXJlY3RvcnlQYXRocyIsImdldEN5Y2xpY0RldkRlcGVuZGVuY3lTdWJEaXJlY3RvcnlQYXRocyIsIk9iamVjdCIsImFzc2lnbiJdLCJtYXBwaW5ncyI6IkFBQUE7Ozs7K0JBVUE7OztlQUF3QkE7OzsrREFSSDttRUFDSTt1QkFFd0I7NkJBQ0M7Ozs7OztBQUVsRCxJQUFRQyx5Q0FBdUZDLGlCQUFRLENBQS9GRCx3Q0FBd0NFLDZDQUErQ0QsaUJBQVEsQ0FBdkRDO0FBRWpDLFNBQVNILDRCQUE0QkksT0FBTyxFQUFFQyxLQUFLLEVBQUVDLE9BQU87SUFDekUsSUFBUUMsYUFBZ0NELFFBQWhDQyxZQUFZQyxrQkFBb0JGLFFBQXBCRSxpQkFDZEMsNEJBQTRCQyxJQUFBQSxnREFBaUMsS0FDN0RDLGVBQWVDLHFCQUFZLENBQUNDLHlEQUF5RCxDQUFDTixZQUFZQyxpQkFBaUJDLDRCQUNuSEssMEJBQTBCSCxhQUFhSSx5QkFBeUIsSUFDaEVDLDZCQUE2QkwsYUFBYU0sNEJBQTRCO0lBRTVFLElBQUlILHlCQUF5QjtRQUMzQixJQUFNSSxvQ0FBb0NQLGFBQWFRLG9DQUFvQztRQUUzRkMsUUFBUUMsR0FBRyxDQUFDcEI7UUFFWnFCLElBQUFBLHlDQUFnQyxFQUFDSjtRQUVqQ2I7UUFFQTtJQUNGO0lBRUEsSUFBSVcsNEJBQTRCO1FBQzlCLElBQU1PLHVDQUF1Q1osYUFBYWEsdUNBQXVDO1FBRWpHSixRQUFRQyxHQUFHLENBQUNsQjtRQUVabUIsSUFBQUEseUNBQWdDLEVBQUNDO1FBRWpDbEI7UUFFQTtJQUNGO0lBRUFvQixPQUFPQyxNQUFNLENBQUNwQixTQUFTO1FBQ3JCSyxjQUFBQTtJQUNGO0lBRUFQO0FBQ0YifQ==