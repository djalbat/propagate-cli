"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "default", {
    enumerable: true,
    get: function() {
        return createReleaseGraphOperation;
    }
});
var _releaseGraph = /*#__PURE__*/ _interop_require_default(require("../releaseGraph"));
var _console = require("../utilities/console");
var _configuration = require("../configuration");
var _messages = require("../messages");
function _interop_require_default(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
function createReleaseGraphOperation(proceed, abort, context) {
    var releaseMap = context.releaseMap, subDirectoryMap = context.subDirectoryMap, forcedDependencyRelations = (0, _configuration.retrieveForcedDependencyRelations)(), releaseGraph = _releaseGraph.default.fromReleaseMapSubDirectoryMapAndForcedDependencyRelations(releaseMap, subDirectoryMap, forcedDependencyRelations), cyclicDependencyPresent = releaseGraph.isCyclicDependencyPresent(), cyclicDevDependencyPresent = releaseGraph.isCyclicDevDependencyPresent();
    if (cyclicDependencyPresent) {
        var cyclicDependencySubDirectoryPaths = releaseGraph.getCyclicDependencySubDirectoryPaths();
        console.log(_messages.AT_LEAST_ONE_CYCLIC_DEPENDENCY_MESSAGE);
        (0, _console.consoleLogSubDirectoryPathsCycle)(cyclicDependencySubDirectoryPaths);
        abort();
        return;
    }
    if (cyclicDevDependencyPresent) {
        var cyclicDevDependencySubDirectoryPaths = releaseGraph.getCyclicDevDependencySubDirectoryPaths();
        console.log(_messages.AT_LEAST_ONE_CYCLIC_DEV_DEPENDENCY_MESSAGE);
        (0, _console.consoleLogSubDirectoryPathsCycle)(cyclicDevDependencySubDirectoryPaths);
        abort();
        return;
    }
    Object.assign(context, {
        releaseGraph: releaseGraph
    });
    proceed();
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9vcGVyYXRpb24vY3JlYXRlUmVsZWFzZUdyYXBoLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuXG5pbXBvcnQgUmVsZWFzZUdyYXBoIGZyb20gXCIuLi9yZWxlYXNlR3JhcGhcIjtcblxuaW1wb3J0IHsgY29uc29sZUxvZ1N1YkRpcmVjdG9yeVBhdGhzQ3ljbGUgfSBmcm9tICcuLi91dGlsaXRpZXMvY29uc29sZSc7XG5pbXBvcnQgeyByZXRyaWV2ZUZvcmNlZERlcGVuZGVuY3lSZWxhdGlvbnMgfSBmcm9tIFwiLi4vY29uZmlndXJhdGlvblwiO1xuaW1wb3J0IHsgQVRfTEVBU1RfT05FX0NZQ0xJQ19ERVBFTkRFTkNZX01FU1NBR0UsIEFUX0xFQVNUX09ORV9DWUNMSUNfREVWX0RFUEVOREVOQ1lfTUVTU0FHRSB9IGZyb20gXCIuLi9tZXNzYWdlc1wiO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBjcmVhdGVSZWxlYXNlR3JhcGhPcGVyYXRpb24ocHJvY2VlZCwgYWJvcnQsIGNvbnRleHQpIHtcbiAgY29uc3QgeyByZWxlYXNlTWFwLCBzdWJEaXJlY3RvcnlNYXAgfSA9IGNvbnRleHQsXG4gICAgICAgIGZvcmNlZERlcGVuZGVuY3lSZWxhdGlvbnMgPSByZXRyaWV2ZUZvcmNlZERlcGVuZGVuY3lSZWxhdGlvbnMoKSxcbiAgICAgICAgcmVsZWFzZUdyYXBoID0gUmVsZWFzZUdyYXBoLmZyb21SZWxlYXNlTWFwU3ViRGlyZWN0b3J5TWFwQW5kRm9yY2VkRGVwZW5kZW5jeVJlbGF0aW9ucyhyZWxlYXNlTWFwLCBzdWJEaXJlY3RvcnlNYXAsIGZvcmNlZERlcGVuZGVuY3lSZWxhdGlvbnMpLFxuICAgICAgICBjeWNsaWNEZXBlbmRlbmN5UHJlc2VudCA9IHJlbGVhc2VHcmFwaC5pc0N5Y2xpY0RlcGVuZGVuY3lQcmVzZW50KCksXG4gICAgICAgIGN5Y2xpY0RldkRlcGVuZGVuY3lQcmVzZW50ID0gcmVsZWFzZUdyYXBoLmlzQ3ljbGljRGV2RGVwZW5kZW5jeVByZXNlbnQoKTtcblxuICBpZiAoY3ljbGljRGVwZW5kZW5jeVByZXNlbnQpIHtcbiAgICBjb25zdCBjeWNsaWNEZXBlbmRlbmN5U3ViRGlyZWN0b3J5UGF0aHMgPSByZWxlYXNlR3JhcGguZ2V0Q3ljbGljRGVwZW5kZW5jeVN1YkRpcmVjdG9yeVBhdGhzKCk7XG5cbiAgICBjb25zb2xlLmxvZyhBVF9MRUFTVF9PTkVfQ1lDTElDX0RFUEVOREVOQ1lfTUVTU0FHRSk7XG5cbiAgICBjb25zb2xlTG9nU3ViRGlyZWN0b3J5UGF0aHNDeWNsZShjeWNsaWNEZXBlbmRlbmN5U3ViRGlyZWN0b3J5UGF0aHMpO1xuXG4gICAgYWJvcnQoKTtcblxuICAgIHJldHVybjtcbiAgfVxuXG4gIGlmIChjeWNsaWNEZXZEZXBlbmRlbmN5UHJlc2VudCkge1xuICAgIGNvbnN0IGN5Y2xpY0RldkRlcGVuZGVuY3lTdWJEaXJlY3RvcnlQYXRocyA9IHJlbGVhc2VHcmFwaC5nZXRDeWNsaWNEZXZEZXBlbmRlbmN5U3ViRGlyZWN0b3J5UGF0aHMoKTtcblxuICAgIGNvbnNvbGUubG9nKEFUX0xFQVNUX09ORV9DWUNMSUNfREVWX0RFUEVOREVOQ1lfTUVTU0FHRSk7XG5cbiAgICBjb25zb2xlTG9nU3ViRGlyZWN0b3J5UGF0aHNDeWNsZShjeWNsaWNEZXZEZXBlbmRlbmN5U3ViRGlyZWN0b3J5UGF0aHMpO1xuXG4gICAgYWJvcnQoKTtcblxuICAgIHJldHVybjtcbiAgfVxuXG4gIE9iamVjdC5hc3NpZ24oY29udGV4dCwge1xuICAgIHJlbGVhc2VHcmFwaFxuICB9KTtcblxuICBwcm9jZWVkKCk7XG59XG4iXSwibmFtZXMiOlsiY3JlYXRlUmVsZWFzZUdyYXBoT3BlcmF0aW9uIiwicHJvY2VlZCIsImFib3J0IiwiY29udGV4dCIsInJlbGVhc2VNYXAiLCJzdWJEaXJlY3RvcnlNYXAiLCJmb3JjZWREZXBlbmRlbmN5UmVsYXRpb25zIiwicmV0cmlldmVGb3JjZWREZXBlbmRlbmN5UmVsYXRpb25zIiwicmVsZWFzZUdyYXBoIiwiUmVsZWFzZUdyYXBoIiwiZnJvbVJlbGVhc2VNYXBTdWJEaXJlY3RvcnlNYXBBbmRGb3JjZWREZXBlbmRlbmN5UmVsYXRpb25zIiwiY3ljbGljRGVwZW5kZW5jeVByZXNlbnQiLCJpc0N5Y2xpY0RlcGVuZGVuY3lQcmVzZW50IiwiY3ljbGljRGV2RGVwZW5kZW5jeVByZXNlbnQiLCJpc0N5Y2xpY0RldkRlcGVuZGVuY3lQcmVzZW50IiwiY3ljbGljRGVwZW5kZW5jeVN1YkRpcmVjdG9yeVBhdGhzIiwiZ2V0Q3ljbGljRGVwZW5kZW5jeVN1YkRpcmVjdG9yeVBhdGhzIiwiY29uc29sZSIsImxvZyIsIkFUX0xFQVNUX09ORV9DWUNMSUNfREVQRU5ERU5DWV9NRVNTQUdFIiwiY29uc29sZUxvZ1N1YkRpcmVjdG9yeVBhdGhzQ3ljbGUiLCJjeWNsaWNEZXZEZXBlbmRlbmN5U3ViRGlyZWN0b3J5UGF0aHMiLCJnZXRDeWNsaWNEZXZEZXBlbmRlbmN5U3ViRGlyZWN0b3J5UGF0aHMiLCJBVF9MRUFTVF9PTkVfQ1lDTElDX0RFVl9ERVBFTkRFTkNZX01FU1NBR0UiLCJPYmplY3QiLCJhc3NpZ24iXSwibWFwcGluZ3MiOiJBQUFBOzs7OytCQVFBOzs7ZUFBd0JBOzs7bUVBTkM7dUJBRXdCOzZCQUNDO3dCQUNpRDs7Ozs7O0FBRXBGLFNBQVNBLDRCQUE0QkMsT0FBTyxFQUFFQyxLQUFLLEVBQUVDLE9BQU87SUFDekUsSUFBUUMsYUFBZ0NELFFBQWhDQyxZQUFZQyxrQkFBb0JGLFFBQXBCRSxpQkFDZEMsNEJBQTRCQyxJQUFBQSxnREFBaUMsS0FDN0RDLGVBQWVDLHFCQUFZLENBQUNDLHlEQUF5RCxDQUFDTixZQUFZQyxpQkFBaUJDLDRCQUNuSEssMEJBQTBCSCxhQUFhSSx5QkFBeUIsSUFDaEVDLDZCQUE2QkwsYUFBYU0sNEJBQTRCO0lBRTVFLElBQUlILHlCQUF5QjtRQUMzQixJQUFNSSxvQ0FBb0NQLGFBQWFRLG9DQUFvQztRQUUzRkMsUUFBUUMsR0FBRyxDQUFDQyxnREFBc0M7UUFFbERDLElBQUFBLHlDQUFnQyxFQUFDTDtRQUVqQ2I7UUFFQTtJQUNGO0lBRUEsSUFBSVcsNEJBQTRCO1FBQzlCLElBQU1RLHVDQUF1Q2IsYUFBYWMsdUNBQXVDO1FBRWpHTCxRQUFRQyxHQUFHLENBQUNLLG9EQUEwQztRQUV0REgsSUFBQUEseUNBQWdDLEVBQUNDO1FBRWpDbkI7UUFFQTtJQUNGO0lBRUFzQixPQUFPQyxNQUFNLENBQUN0QixTQUFTO1FBQ3JCSyxjQUFBQTtJQUNGO0lBRUFQO0FBQ0YifQ==