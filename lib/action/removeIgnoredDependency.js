"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "default", {
    enumerable: true,
    get: function() {
        return removeIgnoredDependencyAction;
    }
});
var _listIgnoredDependencies = /*#__PURE__*/ _interop_require_default(require("../action/listIgnoredDependencies"));
var _removeIgnoredDependency = /*#__PURE__*/ _interop_require_default(require("../operation/prompt/removeIgnoredDependency"));
var _operation = require("../utilities/operation");
var _configuration = require("../configuration");
var _messages = require("../messages");
function _interop_require_default(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
function removeIgnoredDependencyAction() {
    var operations = [
        _removeIgnoredDependency.default
    ], ignoredDependencyNumbers = (0, _listIgnoredDependencies.default)(), ignoredDependencyNumbersLength = ignoredDependencyNumbers.length;
    if (ignoredDependencyNumbersLength === 0) {
        return;
    }
    var context = {
        ignoredDependencyNumbers: ignoredDependencyNumbers
    };
    (0, _operation.executeOperations)(operations, function(completed) {
        if (!completed) {
            console.log(_messages.FAILED_REMOVE_IGNORED_DEPENDENCY_MESSAGE);
            return;
        }
        var ignoredDependencyNumber = context.ignoredDependencyNumber, start = ignoredDependencyNumber - 1, deleteCount = 1, ignoredDependencies = (0, _configuration.retrieveIgnoredDependencies)();
        ignoredDependencies.splice(start, deleteCount);
        (0, _configuration.updateIgnoredDependencies)(ignoredDependencies);
        console.log(_messages.SUCCESSFUL_REMOVE_IGNORED_DEPENDENCY_MESSAGE);
    }, context);
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9hY3Rpb24vcmVtb3ZlSWdub3JlZERlcGVuZGVuY3kuanMiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5cbmltcG9ydCBsaXN0SWdub3JlZERlcGVuZGVuY2llcyBmcm9tIFwiLi4vYWN0aW9uL2xpc3RJZ25vcmVkRGVwZW5kZW5jaWVzXCI7XG5pbXBvcnQgcmVtb3ZlSWdub3JlZERlcGVuZGVuY3lQcm9tcHRPcGVyYXRpb24gZnJvbSBcIi4uL29wZXJhdGlvbi9wcm9tcHQvcmVtb3ZlSWdub3JlZERlcGVuZGVuY3lcIjtcblxuaW1wb3J0IHsgZXhlY3V0ZU9wZXJhdGlvbnMgfSBmcm9tIFwiLi4vdXRpbGl0aWVzL29wZXJhdGlvblwiO1xuaW1wb3J0IHsgdXBkYXRlSWdub3JlZERlcGVuZGVuY2llcywgcmV0cmlldmVJZ25vcmVkRGVwZW5kZW5jaWVzIH0gZnJvbSBcIi4uL2NvbmZpZ3VyYXRpb25cIjtcbmltcG9ydCB7IEZBSUxFRF9SRU1PVkVfSUdOT1JFRF9ERVBFTkRFTkNZX01FU1NBR0UsIFNVQ0NFU1NGVUxfUkVNT1ZFX0lHTk9SRURfREVQRU5ERU5DWV9NRVNTQUdFIH0gZnJvbSBcIi4uL21lc3NhZ2VzXCI7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHJlbW92ZUlnbm9yZWREZXBlbmRlbmN5QWN0aW9uKCkge1xuICBjb25zdCBvcGVyYXRpb25zID0gW1xuICAgICAgICAgIHJlbW92ZUlnbm9yZWREZXBlbmRlbmN5UHJvbXB0T3BlcmF0aW9uXG4gICAgICAgIF0sXG4gICAgICAgIGlnbm9yZWREZXBlbmRlbmN5TnVtYmVycyA9IGxpc3RJZ25vcmVkRGVwZW5kZW5jaWVzKCksXG4gICAgICAgIGlnbm9yZWREZXBlbmRlbmN5TnVtYmVyc0xlbmd0aCA9IGlnbm9yZWREZXBlbmRlbmN5TnVtYmVycy5sZW5ndGg7XG5cbiAgaWYgKGlnbm9yZWREZXBlbmRlbmN5TnVtYmVyc0xlbmd0aCA9PT0gMCkge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIGNvbnN0IGNvbnRleHQgPSB7XG4gICAgICAgICAgaWdub3JlZERlcGVuZGVuY3lOdW1iZXJzXG4gICAgICAgIH07XG5cbiAgZXhlY3V0ZU9wZXJhdGlvbnMob3BlcmF0aW9ucywgKGNvbXBsZXRlZCkgPT4ge1xuICAgIGlmICghY29tcGxldGVkKSB7XG4gICAgICBjb25zb2xlLmxvZyhGQUlMRURfUkVNT1ZFX0lHTk9SRURfREVQRU5ERU5DWV9NRVNTQUdFKTtcblxuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGNvbnN0IHsgaWdub3JlZERlcGVuZGVuY3lOdW1iZXIgfSA9IGNvbnRleHQsXG4gICAgICAgICAgc3RhcnQgPSBpZ25vcmVkRGVwZW5kZW5jeU51bWJlciAtIDEsXG4gICAgICAgICAgZGVsZXRlQ291bnQgPSAxLFxuICAgICAgICAgIGlnbm9yZWREZXBlbmRlbmNpZXMgPSByZXRyaWV2ZUlnbm9yZWREZXBlbmRlbmNpZXMoKTtcblxuICAgIGlnbm9yZWREZXBlbmRlbmNpZXMuc3BsaWNlKHN0YXJ0LCBkZWxldGVDb3VudCk7XG5cbiAgICB1cGRhdGVJZ25vcmVkRGVwZW5kZW5jaWVzKGlnbm9yZWREZXBlbmRlbmNpZXMpO1xuXG4gICAgY29uc29sZS5sb2coU1VDQ0VTU0ZVTF9SRU1PVkVfSUdOT1JFRF9ERVBFTkRFTkNZX01FU1NBR0UpO1xuICB9LCBjb250ZXh0KTtcbn1cbiJdLCJuYW1lcyI6WyJyZW1vdmVJZ25vcmVkRGVwZW5kZW5jeUFjdGlvbiIsIm9wZXJhdGlvbnMiLCJyZW1vdmVJZ25vcmVkRGVwZW5kZW5jeVByb21wdE9wZXJhdGlvbiIsImlnbm9yZWREZXBlbmRlbmN5TnVtYmVycyIsImxpc3RJZ25vcmVkRGVwZW5kZW5jaWVzIiwiaWdub3JlZERlcGVuZGVuY3lOdW1iZXJzTGVuZ3RoIiwibGVuZ3RoIiwiY29udGV4dCIsImV4ZWN1dGVPcGVyYXRpb25zIiwiY29tcGxldGVkIiwiY29uc29sZSIsImxvZyIsIkZBSUxFRF9SRU1PVkVfSUdOT1JFRF9ERVBFTkRFTkNZX01FU1NBR0UiLCJpZ25vcmVkRGVwZW5kZW5jeU51bWJlciIsInN0YXJ0IiwiZGVsZXRlQ291bnQiLCJpZ25vcmVkRGVwZW5kZW5jaWVzIiwicmV0cmlldmVJZ25vcmVkRGVwZW5kZW5jaWVzIiwic3BsaWNlIiwidXBkYXRlSWdub3JlZERlcGVuZGVuY2llcyIsIlNVQ0NFU1NGVUxfUkVNT1ZFX0lHTk9SRURfREVQRU5ERU5DWV9NRVNTQUdFIl0sIm1hcHBpbmdzIjoiQUFBQTs7OzsrQkFTQTs7O2VBQXdCQTs7OzhFQVBZOzhFQUNlO3lCQUVqQjs2QkFDcUM7d0JBQ2dDOzs7Ozs7QUFFeEYsU0FBU0E7SUFDdEIsSUFBTUMsYUFBYTtRQUNYQyxnQ0FBc0M7S0FDdkMsRUFDREMsMkJBQTJCQyxJQUFBQSxnQ0FBdUIsS0FDbERDLGlDQUFpQ0YseUJBQXlCRyxNQUFNO0lBRXRFLElBQUlELG1DQUFtQyxHQUFHO1FBQ3hDO0lBQ0Y7SUFFQSxJQUFNRSxVQUFVO1FBQ1JKLDBCQUFBQTtJQUNGO0lBRU5LLElBQUFBLDRCQUFpQixFQUFDUCxZQUFZLFNBQUNRO1FBQzdCLElBQUksQ0FBQ0EsV0FBVztZQUNkQyxRQUFRQyxHQUFHLENBQUNDLGtEQUF3QztZQUVwRDtRQUNGO1FBRUEsSUFBTSxBQUFFQywwQkFBNEJOLFFBQTVCTSx5QkFDRkMsUUFBUUQsMEJBQTBCLEdBQ2xDRSxjQUFjLEdBQ2RDLHNCQUFzQkMsSUFBQUEsMENBQTJCO1FBRXZERCxvQkFBb0JFLE1BQU0sQ0FBQ0osT0FBT0M7UUFFbENJLElBQUFBLHdDQUF5QixFQUFDSDtRQUUxQk4sUUFBUUMsR0FBRyxDQUFDUyxzREFBNEM7SUFDMUQsR0FBR2I7QUFDTCJ9