"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "default", {
    enumerable: true,
    get: function() {
        return addForcedDependencyRelationAction;
    }
});
var _addForcedDependent = /*#__PURE__*/ _interop_require_default(require("../operation/prompt/addForcedDependent"));
var _addForcedDependency = /*#__PURE__*/ _interop_require_default(require("../operation/prompt/addForcedDependency"));
var _operation = require("../utilities/operation");
var _configuration = require("../configuration");
var _messages = require("../messages");
function _interop_require_default(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
function addForcedDependencyRelationAction() {
    var operations = [
        _addForcedDependency.default,
        _addForcedDependent.default
    ], context = {};
    (0, _operation.executeOperations)(operations, function(completed) {
        if (!completed) {
            console.log(_messages.FAILED_ADD_FORCED_DEPENDENCY_RELATION_MESSAGE);
            return;
        }
        var forcedDependent = context.forcedDependent, forcedDependency = context.forcedDependency, forcedDependencyRelations = (0, _configuration.retrieveForcedDependencyRelations)(), forcedDependencyRelationsIncludesForcedDependencyRelation = forcedDependencyRelations.some(function(forcedDependencyRelation) {
            var dependent = forcedDependencyRelation.dependent, dependency = forcedDependencyRelation.dependency;
            if (dependent === forcedDependent && dependency === forcedDependency) {
                return true;
            }
        });
        if (forcedDependencyRelationsIncludesForcedDependencyRelation) {
            console.log(_messages.FORCED_DEPENDENCY_RELATIONS_INCLUDE_FORCED_DEPENDENCY_RELATION_MESSAGE);
        } else {
            var dependent = forcedDependent, dependency = forcedDependency, forcedDependencyRelation = {
                dependent: dependent,
                dependency: dependency
            };
            forcedDependencyRelations.push(forcedDependencyRelation);
            (0, _configuration.updateForcedDependencyRelations)(forcedDependencyRelations);
            console.log(_messages.SUCCESSFUL_ADD_FORCED_DEPENDENCY_RELATION_MESSAGE);
        }
    }, context);
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9hY3Rpb24vYWRkRm9yY2VkRGVwZW5kZW5jeVJlbGF0aW9uLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuXG5pbXBvcnQgYWRkRm9yY2VkRGVwZW5kZW50UHJvbXB0T3BlcmF0aW9uIGZyb20gXCIuLi9vcGVyYXRpb24vcHJvbXB0L2FkZEZvcmNlZERlcGVuZGVudFwiO1xuaW1wb3J0IGFkZEZvcmNlZERlcGVuZGVuY3lQcm9tcHRPcGVyYXRpb24gZnJvbSBcIi4uL29wZXJhdGlvbi9wcm9tcHQvYWRkRm9yY2VkRGVwZW5kZW5jeVwiO1xuXG5pbXBvcnQgeyBleGVjdXRlT3BlcmF0aW9ucyB9IGZyb20gXCIuLi91dGlsaXRpZXMvb3BlcmF0aW9uXCI7XG5pbXBvcnQgeyByZXRyaWV2ZUZvcmNlZERlcGVuZGVuY3lSZWxhdGlvbnMsIHVwZGF0ZUZvcmNlZERlcGVuZGVuY3lSZWxhdGlvbnMgfSBmcm9tIFwiLi4vY29uZmlndXJhdGlvblwiO1xuaW1wb3J0IHsgRkFJTEVEX0FERF9GT1JDRURfREVQRU5ERU5DWV9SRUxBVElPTl9NRVNTQUdFLFxuICAgICAgICAgU1VDQ0VTU0ZVTF9BRERfRk9SQ0VEX0RFUEVOREVOQ1lfUkVMQVRJT05fTUVTU0FHRSxcbiAgICAgICAgIEZPUkNFRF9ERVBFTkRFTkNZX1JFTEFUSU9OU19JTkNMVURFX0ZPUkNFRF9ERVBFTkRFTkNZX1JFTEFUSU9OX01FU1NBR0UgfSBmcm9tIFwiLi4vbWVzc2FnZXNcIjtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gYWRkRm9yY2VkRGVwZW5kZW5jeVJlbGF0aW9uQWN0aW9uKCkge1xuICBjb25zdCBvcGVyYXRpb25zID0gW1xuICAgICAgICAgIGFkZEZvcmNlZERlcGVuZGVuY3lQcm9tcHRPcGVyYXRpb24sXG4gICAgICAgICAgYWRkRm9yY2VkRGVwZW5kZW50UHJvbXB0T3BlcmF0aW9uXG4gICAgICAgIF0sXG4gICAgICAgIGNvbnRleHQgPSB7fTtcblxuICBleGVjdXRlT3BlcmF0aW9ucyhvcGVyYXRpb25zLCAoY29tcGxldGVkKSA9PiB7XG4gICAgaWYgKCFjb21wbGV0ZWQpIHtcbiAgICAgIGNvbnNvbGUubG9nKEZBSUxFRF9BRERfRk9SQ0VEX0RFUEVOREVOQ1lfUkVMQVRJT05fTUVTU0FHRSk7XG5cbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBjb25zdCB7IGZvcmNlZERlcGVuZGVudCwgZm9yY2VkRGVwZW5kZW5jeSB9ID0gY29udGV4dCxcbiAgICAgICAgICBmb3JjZWREZXBlbmRlbmN5UmVsYXRpb25zID0gcmV0cmlldmVGb3JjZWREZXBlbmRlbmN5UmVsYXRpb25zKCksXG4gICAgICAgICAgZm9yY2VkRGVwZW5kZW5jeVJlbGF0aW9uc0luY2x1ZGVzRm9yY2VkRGVwZW5kZW5jeVJlbGF0aW9uID0gZm9yY2VkRGVwZW5kZW5jeVJlbGF0aW9ucy5zb21lKChmb3JjZWREZXBlbmRlbmN5UmVsYXRpb24pID0+IHsgIC8vL1xuICAgICAgICAgICAgY29uc3QgeyBkZXBlbmRlbnQsIGRlcGVuZGVuY3kgfSA9IGZvcmNlZERlcGVuZGVuY3lSZWxhdGlvbjtcblxuICAgICAgICAgICAgaWYgKChkZXBlbmRlbnQgPT09IGZvcmNlZERlcGVuZGVudCkgJiYgKGRlcGVuZGVuY3kgPT09IGZvcmNlZERlcGVuZGVuY3kpKSB7XG4gICAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH0pO1xuXG4gICAgaWYgKGZvcmNlZERlcGVuZGVuY3lSZWxhdGlvbnNJbmNsdWRlc0ZvcmNlZERlcGVuZGVuY3lSZWxhdGlvbikge1xuICAgICAgY29uc29sZS5sb2coRk9SQ0VEX0RFUEVOREVOQ1lfUkVMQVRJT05TX0lOQ0xVREVfRk9SQ0VEX0RFUEVOREVOQ1lfUkVMQVRJT05fTUVTU0FHRSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGNvbnN0IGRlcGVuZGVudCA9IGZvcmNlZERlcGVuZGVudCwgIC8vL1xuICAgICAgICAgICAgZGVwZW5kZW5jeSA9IGZvcmNlZERlcGVuZGVuY3ksICAvLy9cbiAgICAgICAgICAgIGZvcmNlZERlcGVuZGVuY3lSZWxhdGlvbiA9IHtcbiAgICAgICAgICAgICAgZGVwZW5kZW50LFxuICAgICAgICAgICAgICBkZXBlbmRlbmN5XG4gICAgICAgICAgICB9O1xuXG4gICAgICBmb3JjZWREZXBlbmRlbmN5UmVsYXRpb25zLnB1c2goZm9yY2VkRGVwZW5kZW5jeVJlbGF0aW9uKTtcblxuICAgICAgdXBkYXRlRm9yY2VkRGVwZW5kZW5jeVJlbGF0aW9ucyhmb3JjZWREZXBlbmRlbmN5UmVsYXRpb25zKTtcblxuICAgICAgY29uc29sZS5sb2coU1VDQ0VTU0ZVTF9BRERfRk9SQ0VEX0RFUEVOREVOQ1lfUkVMQVRJT05fTUVTU0FHRSk7XG4gICAgfVxuICB9LCBjb250ZXh0KTtcbn1cbiJdLCJuYW1lcyI6WyJhZGRGb3JjZWREZXBlbmRlbmN5UmVsYXRpb25BY3Rpb24iLCJvcGVyYXRpb25zIiwiYWRkRm9yY2VkRGVwZW5kZW5jeVByb21wdE9wZXJhdGlvbiIsImFkZEZvcmNlZERlcGVuZGVudFByb21wdE9wZXJhdGlvbiIsImNvbnRleHQiLCJleGVjdXRlT3BlcmF0aW9ucyIsImNvbXBsZXRlZCIsImNvbnNvbGUiLCJsb2ciLCJGQUlMRURfQUREX0ZPUkNFRF9ERVBFTkRFTkNZX1JFTEFUSU9OX01FU1NBR0UiLCJmb3JjZWREZXBlbmRlbnQiLCJmb3JjZWREZXBlbmRlbmN5IiwiZm9yY2VkRGVwZW5kZW5jeVJlbGF0aW9ucyIsInJldHJpZXZlRm9yY2VkRGVwZW5kZW5jeVJlbGF0aW9ucyIsImZvcmNlZERlcGVuZGVuY3lSZWxhdGlvbnNJbmNsdWRlc0ZvcmNlZERlcGVuZGVuY3lSZWxhdGlvbiIsInNvbWUiLCJmb3JjZWREZXBlbmRlbmN5UmVsYXRpb24iLCJkZXBlbmRlbnQiLCJkZXBlbmRlbmN5IiwiRk9SQ0VEX0RFUEVOREVOQ1lfUkVMQVRJT05TX0lOQ0xVREVfRk9SQ0VEX0RFUEVOREVOQ1lfUkVMQVRJT05fTUVTU0FHRSIsInB1c2giLCJ1cGRhdGVGb3JjZWREZXBlbmRlbmN5UmVsYXRpb25zIiwiU1VDQ0VTU0ZVTF9BRERfRk9SQ0VEX0RFUEVOREVOQ1lfUkVMQVRJT05fTUVTU0FHRSJdLCJtYXBwaW5ncyI6IkFBQUE7Ozs7K0JBV0E7OztlQUF3QkE7Ozt5RUFUc0I7MEVBQ0M7eUJBRWI7NkJBQ2lEO3dCQUdJOzs7Ozs7QUFFeEUsU0FBU0E7SUFDdEIsSUFBTUMsYUFBYTtRQUNYQyw0QkFBa0M7UUFDbENDLDJCQUFpQztLQUNsQyxFQUNEQyxVQUFVLENBQUM7SUFFakJDLElBQUFBLDRCQUFpQixFQUFDSixZQUFZLFNBQUNLO1FBQzdCLElBQUksQ0FBQ0EsV0FBVztZQUNkQyxRQUFRQyxHQUFHLENBQUNDLHVEQUE2QztZQUV6RDtRQUNGO1FBRUEsSUFBUUMsa0JBQXNDTixRQUF0Q00saUJBQWlCQyxtQkFBcUJQLFFBQXJCTyxrQkFDbkJDLDRCQUE0QkMsSUFBQUEsZ0RBQWlDLEtBQzdEQyw0REFBNERGLDBCQUEwQkcsSUFBSSxDQUFDLFNBQUNDO1lBQzFGLElBQVFDLFlBQTBCRCx5QkFBMUJDLFdBQVdDLGFBQWVGLHlCQUFmRTtZQUVuQixJQUFJLEFBQUNELGNBQWNQLG1CQUFxQlEsZUFBZVAsa0JBQW1CO2dCQUN4RSxPQUFPO1lBQ1Q7UUFDRjtRQUVOLElBQUlHLDJEQUEyRDtZQUM3RFAsUUFBUUMsR0FBRyxDQUFDVyxnRkFBc0U7UUFDcEYsT0FBTztZQUNMLElBQU1GLFlBQVlQLGlCQUNaUSxhQUFhUCxrQkFDYkssMkJBQTJCO2dCQUN6QkMsV0FBQUE7Z0JBQ0FDLFlBQUFBO1lBQ0Y7WUFFTk4sMEJBQTBCUSxJQUFJLENBQUNKO1lBRS9CSyxJQUFBQSw4Q0FBK0IsRUFBQ1Q7WUFFaENMLFFBQVFDLEdBQUcsQ0FBQ2MsMkRBQWlEO1FBQy9EO0lBQ0YsR0FBR2xCO0FBQ0wifQ==