"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "default", {
    enumerable: true,
    get: function() {
        return removeForcedDependencyRelationAction;
    }
});
var _listForcedDependencyRelations = /*#__PURE__*/ _interop_require_default(require("../action/listForcedDependencyRelations"));
var _removeForcedDependencyRelation = /*#__PURE__*/ _interop_require_default(require("../operation/prompt/removeForcedDependencyRelation"));
var _operation = require("../utilities/operation");
var _configuration = require("../configuration");
var _messages = require("../messages");
function _interop_require_default(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
function removeForcedDependencyRelationAction() {
    var operations = [
        _removeForcedDependencyRelation.default
    ], forcedDependencyRelationNumbers = (0, _listForcedDependencyRelations.default)(), forcedDependencyRelationNumbersLength = forcedDependencyRelationNumbers.length;
    if (forcedDependencyRelationNumbersLength === 0) {
        return;
    }
    var context = {
        forcedDependencyRelationNumbers: forcedDependencyRelationNumbers
    };
    (0, _operation.executeOperations)(operations, function(completed) {
        if (!completed) {
            console.log(_messages.FAILED_REMOVE_FORCED_DEPENDENCY_RELATION_MESSAGE);
            return;
        }
        var forcedDependencyRelationNumber = context.forcedDependencyRelationNumber, start = forcedDependencyRelationNumber - 1, deleteCount = 1, ignoredDependencies = (0, _configuration.retrieveForcedDependencyRelations)();
        ignoredDependencies.splice(start, deleteCount);
        (0, _configuration.updateForcedDependencyRelations)(ignoredDependencies);
        console.log(_messages.SUCCESSFUL_REMOVE_FORCED_DEPENDENCY_RELATION_MESSAGE);
    }, context);
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9hY3Rpb24vcmVtb3ZlRm9yY2VkRGVwZW5kZW5jeVJlbGF0aW9uLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuXG5pbXBvcnQgbGlzdEZvcmNlZERlcGVuZGVuY3lSZWxhdGlvbnMgZnJvbSBcIi4uL2FjdGlvbi9saXN0Rm9yY2VkRGVwZW5kZW5jeVJlbGF0aW9uc1wiO1xuaW1wb3J0IHJlbW92ZUZvcmNlZERlcGVuZGVuY3lSZWxhdGlvblByb21wdE9wZXJhdGlvbiBmcm9tIFwiLi4vb3BlcmF0aW9uL3Byb21wdC9yZW1vdmVGb3JjZWREZXBlbmRlbmN5UmVsYXRpb25cIjtcblxuaW1wb3J0IHsgZXhlY3V0ZU9wZXJhdGlvbnMgfSBmcm9tIFwiLi4vdXRpbGl0aWVzL29wZXJhdGlvblwiO1xuaW1wb3J0IHsgdXBkYXRlRm9yY2VkRGVwZW5kZW5jeVJlbGF0aW9ucywgcmV0cmlldmVGb3JjZWREZXBlbmRlbmN5UmVsYXRpb25zIH0gZnJvbSBcIi4uL2NvbmZpZ3VyYXRpb25cIjtcbmltcG9ydCB7IEZBSUxFRF9SRU1PVkVfRk9SQ0VEX0RFUEVOREVOQ1lfUkVMQVRJT05fTUVTU0FHRSwgU1VDQ0VTU0ZVTF9SRU1PVkVfRk9SQ0VEX0RFUEVOREVOQ1lfUkVMQVRJT05fTUVTU0FHRSB9IGZyb20gXCIuLi9tZXNzYWdlc1wiO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiByZW1vdmVGb3JjZWREZXBlbmRlbmN5UmVsYXRpb25BY3Rpb24oKSB7XG4gIGNvbnN0IG9wZXJhdGlvbnMgPSBbXG4gICAgICAgICAgcmVtb3ZlRm9yY2VkRGVwZW5kZW5jeVJlbGF0aW9uUHJvbXB0T3BlcmF0aW9uXG4gICAgICAgIF0sXG4gICAgICAgIGZvcmNlZERlcGVuZGVuY3lSZWxhdGlvbk51bWJlcnMgPSBsaXN0Rm9yY2VkRGVwZW5kZW5jeVJlbGF0aW9ucygpLFxuICAgICAgICBmb3JjZWREZXBlbmRlbmN5UmVsYXRpb25OdW1iZXJzTGVuZ3RoID0gZm9yY2VkRGVwZW5kZW5jeVJlbGF0aW9uTnVtYmVycy5sZW5ndGg7XG5cbiAgaWYgKGZvcmNlZERlcGVuZGVuY3lSZWxhdGlvbk51bWJlcnNMZW5ndGggPT09IDApIHtcbiAgICByZXR1cm47XG4gIH1cblxuICBjb25zdCBjb250ZXh0ID0ge1xuICAgICAgICAgIGZvcmNlZERlcGVuZGVuY3lSZWxhdGlvbk51bWJlcnNcbiAgICAgICAgfTtcblxuICBleGVjdXRlT3BlcmF0aW9ucyhvcGVyYXRpb25zLCAoY29tcGxldGVkKSA9PiB7XG4gICAgaWYgKCFjb21wbGV0ZWQpIHtcbiAgICAgIGNvbnNvbGUubG9nKEZBSUxFRF9SRU1PVkVfRk9SQ0VEX0RFUEVOREVOQ1lfUkVMQVRJT05fTUVTU0FHRSk7XG5cbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBjb25zdCB7IGZvcmNlZERlcGVuZGVuY3lSZWxhdGlvbk51bWJlciB9ID0gY29udGV4dCxcbiAgICAgICAgICBzdGFydCA9IGZvcmNlZERlcGVuZGVuY3lSZWxhdGlvbk51bWJlciAtIDEsXG4gICAgICAgICAgZGVsZXRlQ291bnQgPSAxLFxuICAgICAgICAgIGlnbm9yZWREZXBlbmRlbmNpZXMgPSByZXRyaWV2ZUZvcmNlZERlcGVuZGVuY3lSZWxhdGlvbnMoKTtcblxuICAgIGlnbm9yZWREZXBlbmRlbmNpZXMuc3BsaWNlKHN0YXJ0LCBkZWxldGVDb3VudCk7XG5cbiAgICB1cGRhdGVGb3JjZWREZXBlbmRlbmN5UmVsYXRpb25zKGlnbm9yZWREZXBlbmRlbmNpZXMpO1xuXG4gICAgY29uc29sZS5sb2coU1VDQ0VTU0ZVTF9SRU1PVkVfRk9SQ0VEX0RFUEVOREVOQ1lfUkVMQVRJT05fTUVTU0FHRSk7XG4gIH0sIGNvbnRleHQpO1xufVxuIl0sIm5hbWVzIjpbInJlbW92ZUZvcmNlZERlcGVuZGVuY3lSZWxhdGlvbkFjdGlvbiIsIm9wZXJhdGlvbnMiLCJyZW1vdmVGb3JjZWREZXBlbmRlbmN5UmVsYXRpb25Qcm9tcHRPcGVyYXRpb24iLCJmb3JjZWREZXBlbmRlbmN5UmVsYXRpb25OdW1iZXJzIiwibGlzdEZvcmNlZERlcGVuZGVuY3lSZWxhdGlvbnMiLCJmb3JjZWREZXBlbmRlbmN5UmVsYXRpb25OdW1iZXJzTGVuZ3RoIiwibGVuZ3RoIiwiY29udGV4dCIsImV4ZWN1dGVPcGVyYXRpb25zIiwiY29tcGxldGVkIiwiY29uc29sZSIsImxvZyIsIkZBSUxFRF9SRU1PVkVfRk9SQ0VEX0RFUEVOREVOQ1lfUkVMQVRJT05fTUVTU0FHRSIsImZvcmNlZERlcGVuZGVuY3lSZWxhdGlvbk51bWJlciIsInN0YXJ0IiwiZGVsZXRlQ291bnQiLCJpZ25vcmVkRGVwZW5kZW5jaWVzIiwicmV0cmlldmVGb3JjZWREZXBlbmRlbmN5UmVsYXRpb25zIiwic3BsaWNlIiwidXBkYXRlRm9yY2VkRGVwZW5kZW5jeVJlbGF0aW9ucyIsIlNVQ0NFU1NGVUxfUkVNT1ZFX0ZPUkNFRF9ERVBFTkRFTkNZX1JFTEFUSU9OX01FU1NBR0UiXSwibWFwcGluZ3MiOiJBQUFBOzs7OytCQVNBOzs7ZUFBd0JBOzs7b0ZBUGtCO3FGQUNnQjt5QkFFeEI7NkJBQ2lEO3dCQUNvQzs7Ozs7O0FBRXhHLFNBQVNBO0lBQ3RCLElBQU1DLGFBQWE7UUFDWEMsdUNBQTZDO0tBQzlDLEVBQ0RDLGtDQUFrQ0MsSUFBQUEsc0NBQTZCLEtBQy9EQyx3Q0FBd0NGLGdDQUFnQ0csTUFBTTtJQUVwRixJQUFJRCwwQ0FBMEMsR0FBRztRQUMvQztJQUNGO0lBRUEsSUFBTUUsVUFBVTtRQUNSSixpQ0FBQUE7SUFDRjtJQUVOSyxJQUFBQSw0QkFBaUIsRUFBQ1AsWUFBWSxTQUFDUTtRQUM3QixJQUFJLENBQUNBLFdBQVc7WUFDZEMsUUFBUUMsR0FBRyxDQUFDQywwREFBZ0Q7WUFFNUQ7UUFDRjtRQUVBLElBQU0sQUFBRUMsaUNBQW1DTixRQUFuQ00sZ0NBQ0ZDLFFBQVFELGlDQUFpQyxHQUN6Q0UsY0FBYyxHQUNkQyxzQkFBc0JDLElBQUFBLGdEQUFpQztRQUU3REQsb0JBQW9CRSxNQUFNLENBQUNKLE9BQU9DO1FBRWxDSSxJQUFBQSw4Q0FBK0IsRUFBQ0g7UUFFaENOLFFBQVFDLEdBQUcsQ0FBQ1MsOERBQW9EO0lBQ2xFLEdBQUdiO0FBQ0wifQ==